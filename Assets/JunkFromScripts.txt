in Chromosome file:

    // For possible MAP-Elites implementation
    // public FeatureDimension featureDescriptor;
	
    public Chromosome DeepCopy()
    {
        Chromosome chromosome = (Chromosome)this.MemberwiseClone();
        List<Gene> _genes = new List<Gene>();
        foreach (Gene i in genes)
        {
            _genes.Add(new Gene(i.allele));
        }
        chromosome.genes = _genes;
        return chromosome;
    }
	
In utility file:
    //public static int GetRandomWeightedIndex(double[] weights)
    //{
    //    if (weights == null || weights.Length == 0) return -1;

    //    double w;
    //    double t = 0;
    //    int i;
    //    for (i = 0; i < weights.Length; i++)
    //    {
    //        w = weights[i];

    //        if (double.IsPositiveInfinity(w))
    //        {
    //            return i;
    //        }
    //        else if (w >= 0f && !double.IsNaN(w))
    //        {
    //            t += weights[i];
    //        }
    //    }

    //    double r = random.NextDouble();
    //    double s = 0f;

    //    for (i = 0; i < weights.Length; i++)
    //    {
    //        w = weights[i];
    //        if (double.IsNaN(w) || w <= 0f) continue;

    //        s += w / t;
    //        if (s >= r) return i;
    //    }

    //    return -1;
    //}

in PlacementDragAndLock

        private void PinchAndZoom()
        {
            if (!isGenerated) return;
            if (placedObject == null && placedPrefab != null)
            {
                placedObject = placedPrefab;
            }
            if (placedPrefab == null)
            {
                Debug.Log($"Placed prefab is null (check placed Object) in PNZ method");
                return;
            }
            if (Input.touchCount == 2)
            {
                var touchZero = Input.GetTouch(0);
                var touchOne = Input.GetTouch(1);

                if (touchZero.phase == UnityEngine.TouchPhase.Ended || touchZero.phase == UnityEngine.TouchPhase.Canceled ||
                    touchOne.phase == UnityEngine.TouchPhase.Ended || touchOne.phase == UnityEngine.TouchPhase.Canceled)
                {
                    return;
                }

                if (touchZero.phase == UnityEngine.TouchPhase.Began || touchOne.phase == UnityEngine.TouchPhase.Began)
                {
                    initialDistance = Vector2.Distance(touchZero.position, touchOne.position);
                    initialScale = placedObject.transform.localScale;
                }
                else
                {
                    var currentDistance = Vector2.Distance(touchZero.position, touchOne.position);

                    if (Mathf.Approximately(initialDistance, 0))
                    {
                        return; //change is too small to do anything
                    }

                    var factor = currentDistance / initialDistance;
                    placedObject.transform.localScale = initialScale * factor;
                }
            }
        }

	
in GenerateGame file:

    // private void ResetGameMap()
    // {
    //     foreach( var key in Utility.gamePlacement.Keys.ToList())
    //     {
    //         Utility.gamePlacement[key] = BlockType.NONE;
    //     } 
    // }
	
in PlatformGenerator file:

        // public BlockTile[] blockTiles;

in NavMeshLinks_AutoPlacer:
// namespace eDmitriyAssets.NavmeshLinksGenerator

		variables:
			//private List< Vector3 > spawnedLinksPositionsList = new List< Vector3 >();
		
		in Generate:
			//spawnedLinksPositionsList.Clear();

		CalcEdges:
			//Debug.DrawLine(edge.facingNormal * Vector3.forward, Vector3.forward * 10, Color.green, 15);

			//Debug.DrawLine(edge.start + Vector3.up * 0.5f, edge.end + Vector3.up * 0.5f, Color.green, 15);
			
		CheckPlacePosHorizontal:
			//Debug.DrawRay(endPos, Vector3.up, Color.blue, 20);
            //Debug.DrawLine(cheatStartPos, endPos, Color.white, 20);
            //Debug.DrawLine(startPos, endPos, Color.white, 2);
		
            //Debug.DrawLine(pos, offSetPosY, Color.white, 20);

			//Debug.DrawRay(cheatStartPos, cheatStartPos + sphereCastRadius * Vector3.up, Color.red, 25);
			//GameObject go = Instantiate(sphereCast);
			//go.transform.position = cheatStartPos;
			//go.transform.localScale = new Vector3(maxJumpDist * 2, maxJumpDist * 2, maxJumpDist * 2);
			
            //Debug.Log($"Distance from edge to navmesh hit point {Vector3.Distance(pos, navMeshHit.position)}");
            //Debug.DrawLine(pos, navMeshHit.position, Color.red, 10);

            //Should be both ways for horizontal links		
			
		CheckPlacePos:
            // create line from navmesh downwards
            //Debug.DrawLine(pos + Vector3.right * 0.2f, endPos, Color.white, 15);
            //Debug.DrawLine(pos, endPos, Color.white, 15);	

            //Debug.DrawLine(pos, navMeshHit.position, Color.green, 15);

			// should check if the y position is within a range. if navMeshHit.position.y < pos.y (angle wise) then
			// instantiate onewayLink. Else instantiate two way link

			//added these 2 line to check to make sure there aren't flat horizontal links going through walls
			//Vector3 calcV3 = (pos - normal * Vector3.forward * 0.02f);
			//if ((calcV3.y - navMeshHit.position.y) > 1f)
			//{			
			
			//pos - normal * Vector3.forward * 0.02f,
            //pos - normal * Vector3.forward * 0.02f,
			
		PlaceTiles:
			//Debug.DrawLine(edge.start + Vector3.up * 0.5f, edge.end + Vector3.up * 0.5f, Color.green, 15);

			// Edge length is 0.4 all around apart from a count which are 0.4000001
			//Debug.Log(edge.length);
				
			//if (edge.length > 0.41 && edge.length < 0.5)
			//{
			//    Debug.DrawLine(edge.start + Vector3.up * 0.5f, edge.end + Vector3.up * 0.5f, Color.red, 15);
			//} 
			//if (tilesCountWidth >= 2)
			//{
			//    Debug.DrawLine(edge.start + Vector3.up * 0.5f, edge.end + Vector3.up * 0.5f, Color.green, 15);
			//}

			//Debug.DrawLine(edge.start + Vector3.right * 0.2f, edge.end, Color.green, 15);

			//Debug.Log($"tilesCountWidth: {tilesCountWidth}");	
in Path3D:
		GetNeighbours:
			// change this line to fix issue
			// bool connectivity = Math.Abs(dx) + Math.Abs(dy) + Math.Abs(dz) <= 2;
				
			//experiment1 - this changed it hang = too many operations
			// bool connectivity = true;
			//experiment2 - works
			
in Rendering (Folder) ->> Might need this for directional lights in scene:

using UnityEngine.XR.ARFoundation;
using UnityEngine;

// Obtained via https://github.com/Unity-Technologies/arfoundation-samples/blob/main/Assets/Scripts/BasicLightEstimation.cs
[RequireComponent(typeof(Light))]
public class LightEstimation : MonoBehaviour
{
    [SerializeField]
    [Tooltip("The ARCameraManager which will produce frame events containing light estimation information.")]
    ARCameraManager m_CameraManager;

    /// <summary>
    /// Get or set the <c>ARCameraManager</c>.
    /// </summary>
    public ARCameraManager cameraManager
    {
        get { return m_CameraManager; }
        set
        {
            if (m_CameraManager == value)
                return;

            if (m_CameraManager != null)
                m_CameraManager.frameReceived -= FrameChanged;

            m_CameraManager = value;

            if (m_CameraManager != null & enabled)
                m_CameraManager.frameReceived += FrameChanged;
        }
    }

    /// <summary>
    /// The estimated brightness of the physical environment, if available.
    /// </summary>
    public float? brightness { get; private set; }

    /// <summary>
    /// The estimated color temperature of the physical environment, if available.
    /// </summary>
    public float? colorTemperature { get; private set; }

    /// <summary>
    /// The estimated color correction value of the physical environment, if available.
    /// </summary>
    public Color? colorCorrection { get; private set; }

    void Awake()
    {
        m_Light = GetComponent<Light>();
    }

    void OnEnable()
    {
        if (m_CameraManager != null)
            m_CameraManager.frameReceived += FrameChanged;
    }

    void OnDisable()
    {
        if (m_CameraManager != null)
            m_CameraManager.frameReceived -= FrameChanged;
    }

    void FrameChanged(ARCameraFrameEventArgs args)
    {
        if (args.lightEstimation.averageBrightness.HasValue)
        {
            brightness = args.lightEstimation.averageBrightness.Value;
            m_Light.intensity = brightness.Value;
        }
        else
        {
            brightness = null;
        }

        if (args.lightEstimation.averageColorTemperature.HasValue)
        {
            colorTemperature = args.lightEstimation.averageColorTemperature.Value;
            m_Light.colorTemperature = colorTemperature.Value;
        }
        else
        {
            colorTemperature = null;
        }

        if (args.lightEstimation.colorCorrection.HasValue)
        {
            colorCorrection = args.lightEstimation.colorCorrection.Value;
            m_Light.color = colorCorrection.Value;
        }
        else
        {
            colorCorrection = null;
        }
    }

    Light m_Light;
}


AStar
// using System;
// using System.Collections;
// using System.Collections.Generic;
// using UnityEngine;
// using Object = UnityEngine.Object;
//
// public class AStar {
//     private Dictionary<int, HashSet<Neighbor>> adjacency;
//     private int destination;
//
//     private NavigableSet<Step> pending = new TreeSet<>();
//
//     public Astar(Map<Integer, Set<Neighbor>> adjacency, int source, int destination) {
//         this.adjacency = adjacency;
//         this.destination = destination;
//
//         this.pending.add(new Step(source, null, 0));
//     }
//
//     public List<int> nextShortestPath() {
//         Step current = this.pending.pollFirst();
//         while( current != null) {
//             if( current.getId() == this.destination )
//                 return current.generatePath();
//             for (Neighbor neighbor : this.adjacency.get(current.id)) {
//                 if(!current.seen(neighbor.getId())) {
//                     final Step nextStep = new Step(neighbor.getId(), current, current.cost + neighbor.cost + predictCost(neighbor.id, this.destination));
//                     this.pending.add(nextStep);
//                 }
//             }
//             current = this.pending.pollFirst();
//         }
//         return null;
//     }
//
//     protected int predictCost(int source, int destination) {
//         return 0; //Behaves identical to Dijkstra's algorithm, override to make it A*
//     }
//
//     private class Step : IComparable<Step> {
//         int id;
//         Step parent;
//         int cost;
//
//         public Step(int id, Step parent, int cost) {
//             this.id = id;
//             this.parent = parent;
//             this.cost = cost;
//         }
//
//         public int getId() {
//             return id;
//         }
//
//         public Step getParent() {
//             return parent;
//         }
//
//         public int getCost() {
//             return cost;
//         }
//
//         public bool seen(int node) {
//             if(this.id == node)
//                 return true;
//             else if(parent == null)
//                 return false;
//             else
//                 return this.parent.seen(node);
//         }
//
//         public List<int> generatePath() {
//             List<int> path;
//             if(this.parent != null)
//                 path = this.parent.generatePath();
//             else
//                 path = new List<int>();
//             path.Add(this.id);
//             return path;
//         }
//
//         public bool equals(Object o) {
//             if (this.Equals(o))
//             {
//                 return true;
//             }
//
//             if (o == null || this.GetType() != o.GetType())
//             {
//                 return false;
//             }
//             Step step = (Step) o;
//             return id == step.id &&
//                 cost == step.cost &&
//                 Object.equals(parent, step.parent);
//         }
//         
//         public static int hashCode() {
//             return Objects.hash(id, parent, cost);
//         }
//
//         public int CompareTo(Step step)
//         {
//             if(step == null)
//                 return 1;
//             if( this.cost != step.cost)
//                 return int.compare(this.cost, step.cost);
//             if( this.id != step.id )
//                 return Integer.compare(this.id, step.id);
//             if( this.parent != null )
//                 this.parent.compareTo(step.parent);
//             if(step.parent == null)
//                 return 0;
//             return -1;
//         }
//     }
//
//     private class Neighbor {
//         int id;
//         int cost;
//
//         public Neighbor(int id, int cost) {
//             this.id = id;
//             this.cost = cost;
//         }
//
//         public int getId() {
//             return id;
//         }
//
//         public int getCost() {
//             return cost;
//         }
//     }
//
//     public static void main(String[] args) {
//         // Dictionary<int, HashSet<Neighbor>> adjacency = createAdjacency();
//         AStar search = new AStar(adjacency, 1, 4);
//         Debug.Log("printing all paths from shortest to longest...");
//         List<int> path = search.nextShortestPath();
//         while(path != null) {
//             Debug.Log(path);
//             path = search.nextShortestPath();
//         }
//     }
//
//     // private Dictionary<int, HashSet<Neighbor>> createAdjacency() {
//     //     Dictionary<int, HashSet<Neighbor>> adjacency = new Dictionary<int, HashSet<Neighbor>>();
//     //
//     //     //This sets up the adjacencies. In this case all adjacencies have a cost of 1, but they dont need to. Otherwise
//     //     //They are exactly the same as the example you gave in your question
//     //     addAdjacency(adjacency, 5,1,1,2,1,3,1);
//     //     addAdjacency(adjacency, 1,2,1,5,1);
//     //     addAdjacency(adjacency, 2,1,1,3,1,4,1,5,1);
//     //     addAdjacency(adjacency, 3,2,1,5,1);
//     //     addAdjacency(adjacency, 4,2,1);
//     //
//     //     return Collections.unmodifiableMap(adjacency);
//     // }
//
//     // private static void addAdjacency(Map<Integer, Set<Neighbor>> adjacency, int source, Integer... dests) {
//     //     if( dests.length % 2 != 0)
//     //         throw new IllegalArgumentException("dests must have an equal number of arguments, each pair is the id and cost for that traversal");
//     //
//     //     final Set<Neighbor> destinations = new HashSet<>();
//     //     for(int i = 0; i < dests.length; i+=2)
//     //         destinations.add(new Neighbor(dests[i], dests[i+1]));
//     //     adjacency.put(source, Collections.unmodifiableSet(destinations));
//     // }
// }


